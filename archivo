21.
 
2.0.0p247 :001 > "\t\n"
 => "\t\n" 
2.0.0p247 :002 > '\t\n'
 => "\\t\\n" 

22. %q es un string

2.0.0p247 :003 > %q{hello world\n}
 => "hello world\\n" 

2.0.0p247 :005 > %q{'a' 'b' 'c'}
 => "'a' 'b' 'c'" 

23.

2.0.0p247 :001 > %Q{hello world\n}
 => "hello world\n" 

2.0.0p247 :002 > %Q{"a" "b" "c"}
 => "\"a\" \"b\" \"c\"" 

24.

2.0.0p247 :001 > a=4
 => 4 
2.0.0p247 :002 > b=2
 => 2 
2.0.0p247 :003 > c= <<HERE
2.0.0p247 :004"> --#{a}--
2.0.0p247 :005"> --#{b}--
2.0.0p247 :006"> HERE
 => "--4--\n--2--\n" 

25.

2.0.0p247 :001 > a=4
 => 4 
2.0.0p247 :002 > b=2
 => 2 
2.0.0p247 :003 > c= <<'HERE'
2.0.0p247 :004'> --#{a}--
2.0.0p247 :005'> --#{b}--
2.0.0p247 :006'> HERE
 => "--\#{a}--\n--\#{b}--\n"

26.

2.0.0p247 :001 > s="hello"
 => "hello" 
2.0.0p247 :002 > s[0,2]
 => "he" 
2.0.0p247 :003 > s[-1,1]
 => "o" 
2.0.0p247 :004 > s[0,10]
 => "hello" 

27.

2.0.0p247 :001 > g = "hello"
 => "hello" 
2.0.0p247 :003 > g << " world"
 => "hello world"

28.

2.0.0p247 :004 > e = '.'*3
 => "..." 

29.

2.0.0p247 :001 > a = 1
 => 1 
2.0.0p247 :002 > "#{a=a+1} "*3
 => "2 2 2 "

30.

2.0.0p247 :001 > %w[this is a test]
 => ["this", "is", "a", "test"]

Un array.

31.

2.0.0p247 :001 > %w[\t \n]
 => ["\\t", "\\n"]

32.

2.0.0p247 :002 > %W[\t \n]
 => ["\t", "\n"] 

33.

2.0.0p247 :001 > nils = Array.new(3)
 => [nil, nil, nil] 

34.

2.0.0p247 :001 > zeros = Array.new(3, 0)
=> [0, 0, 0] 

35.

2.0.0p247 :001 > x = [[1,2],[3,4]]
 => [[1, 2], [3, 4]] 
2.0.0p247 :002 > b = Array.new(x)
 => [[1, 2], [3, 4]]  

36.

2.0.0p247 :004 > c = Array.new(3) {|i| 2*i}
 => [0, 2, 4] 

37.

2.0.0p247 :001 > a = ('a'..'e').to_a
 => ["a", "b", "c", "d", "e"] 
2.0.0p247 :002 > a[1,1]
 => ["b"] 
2.0.0p247 :003 > a[-2,2]
 => ["d", "e"] 
2.0.0p247 :004 > a[0..2]
 => ["a", "b", "c"] 
2.0.0p247 :005 > a[0...1]
 => ["a"] 
2.0.0p247 :006 > a[-2..-1]
 => ["d", "e"] 

38.
 => ["a", "b", "c", "d", "e"] 
2.0.0p247 :003 > a
 => ["a", "b", "c", "d", "e"] 
2.0.0p247 :004 > a[0,2] = %w{A B}
 => ["A", "B"] 
2.0.0p247 :005 > a
 => ["A", "B", "c", "d", "e"] 
2.0.0p247 :006 > a[2..5] = %w{C D E}
 => ["C", "D", "E"] 
2.0.0p247 :007 > a
 => ["A", "B", "C", "D", "E"] 
2.0.0p247 :009 > a[0,0] = [1,2,3]
 => [1, 2, 3] 
2.0.0p247 :010 > a
 => [1, 2, 3, "A", "B", "C", "D", "E"] 
2.0.0p247 :011 > a[0,2] = []
 => [] 
2.0.0p247 :012 > a
 => [3, "A", "B", "C", "D", "E"] 
2.0.0p247 :013 > a[-1,1] = [ 'Z' ]
 => ["Z"] 
2.0.0p247 :014 > a
 => [3, "A", "B", "C", "D", "Z"] 
2.0.0p247 :015 > a[-2,2] = nil
 => nil 
2.0.0p247 :016 > a
 => [3, "A", "B", "C", nil] 

39.

2.0.0p247 :017 > a = (1...4).to_a
 => [1, 2, 3] 
2.0.0p247 :018 > a = a + [4,5]
 => [1, 2, 3, 4, 5] 
2.0.0p247 :019 > a += [[6,7,8]]
 => [1, 2, 3, 4, 5, [6, 7, 8]] 
2.0.0p247 :020 > a = a + 9
TypeError: no implicit conversion of Fixnum into Array

40.

2.0.0p247 :001 > x = %w{a b c b a}
 => ["a", "b", "c", "b", "a"] 
2.0.0p247 :002 > x = x - %w{b c d}
 => ["a", "a"] 

41.

2.0.0p247 :001 > z = [0]*8
 => [0, 0, 0, 0, 0, 0, 0, 0] 

42.

2.0.0p247 :001 > a = []
 => [] 
2.0.0p247 :002 > a << 1
 => [1] 
2.0.0p247 :003 > a << 2 << 3
 => [1, 2, 3] 
2.0.0p247 :004 > a << [4,5,6]
 => [1, 2, 3, [4, 5, 6]] 
2.0.0p247 :005 > a.concat [7,8]
 => [1, 2, 3, [4, 5, 6], 7, 8] 

43.

2.0.0p247 :001 > a = [1, 1, 2, 2, 3, 3, 4]
 => [1, 1, 2, 2, 3, 3, 4] 
2.0.0p247 :002 > b = [5, 5, 4, 4, 3, 3, 2]
 => [5, 5, 4, 4, 3, 3, 2] 
2.0.0p247 :003 > c = a |b
 => [1, 2, 3, 4, 5] 
2.0.0p247 :004 > d = b |a
 => [5, 4, 3, 2, 1] 
2.0.0p247 :005 > e = a & b
 => [2, 3, 4] 
2.0.0p247 :006 > f = b & a
 => [4, 3, 2] 

44.

irb(main):009:0> a = 1..10
=> 1..10
irb(main):010:0> a.class
=> Range
irb(main):011:0> a.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
irb(main):012:0> b = 1...10
=> 1...10
irb(main):013:0> b.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9]
irb(main):014:0> b.include? 8
=> true
irb(main):015:0> b.step(2) {|x| print "#{x} " }
1 3 5 7 9 => 1...10
irb(main):016:0> 1..3.to_a
NoMethodError: undefined method `to_a' for 3:Fixnum
	from (irb):16
	from /usr/bin/irb:12:in `<main>'

45.

irb(main):001:0> r = 0...100
=> 0...100
irb(main):002:0> r.member? 50
=> true
irb(main):003:0> r.include? 99.9
=> true
irb(main):004:0> r.member? 99.9
=> true

46.

irb(main):001:0> true.class
=> TrueClass
irb(main):002:0> false.class
=> FalseClass
irb(main):003:0> puts "hello" if 0
hello
=> nil
irb(main):004:0> puts "hello" if nil
=> nil
irb(main):005:0> puts "hello" if ""
(irb):5: warning: string literal in condition
hello
=> nil

47.

irb(main):001:0> x = :sym
=> :sym
irb(main):002:0> x.class
=> Symbol
irb(main):003:0> x == 'sym'
=> false
irb(main):004:0> x == :sym
=> true
irb(main):005:0> z = :'a long symbol'
=> :"a long symbol"
irb(main):006:0> z.class
=> Symbol
irb(main):007:0> x == 'sym'.to_sym
=> true
irb(main):010:0> x.to_s == 'sym'
=> true

48.

irb(main):001:0> s = "Ruby"
=> "Ruby"
irb(main):002:0> t = s
=> "Ruby"
irb(main):003:0> t[-1] = ""
=> ""
irb(main):004:0> print s
Rub=> nil
irb(main):005:0> t = "Java"
=> "Java"
irb(main):006:0> print s, t
RubJava=> nil

49.

irb(main):001:0> "%d %s" % [3, "rubies"]
=> "3 rubies"

50.

irb(main):002:0> x, y = 4,5
=> [4, 5]
irb(main):003:0> z = x > y ? x : y
=> 5
irb(main):004:0> x,y,z = [1,2,3]
=> [1, 2, 3]

51.

irb(main):001:0> x = { :a => 1, :b => 2}
=> {:a=>1, :b=>2}
irb(main):002:0> x.keys
=> [:a, :b]
irb(main):004:0> x.values
=> [1, 2]
irb(main):005:0> x[:c] = 3
=> 3
irb(main):006:0> x
=> {:a=>1, :b=>2, :c=>3}
irb(main):007:0> x.delete('a')
=> nil
irb(main):008:0> x
=> {:a=>1, :b=>2, :c=>3}
irb(main):009:0> x.delete(:a)
=> 1
irb(main):010:0> x
=> {:b=>2, :c=>3}
irb(main):011:0> x = { :a => 1, :b => 2, :c => 4}
=> {:a=>1, :b=>2, :c=>4}
irb(main):012:0> x.delete_if { |k,v| v % 2 == 0}
=> {:a=>1}
irb(main):013:0> x
=> {:a=>1}

52.

yield ejecuta subrutinas

53.

No veo diferencias

54.

irb(main):001:0> 'hello world, hello LPP'.scan /\w+/
=> ["hello", "world", "hello", "LPP"]

55.

es un iterador que muestra c
